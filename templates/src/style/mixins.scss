// Sass Mixins
//
// More information about mixins in:
// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins
// Add comment to every function
@import 'vars.scss';

/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes
/// @group Fonts
/// @example scss Input
///   .landing-section {
///     @include font-light();
///   }
@mixin font-light() {
  font-family: 'Roboto', #{$generic-fonts};
  font-weight: 300;
}

/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes
/// @group Fonts
/// @example scss Input
///   .landing-section {
///     @include font-regular();
///   }
@mixin font-regular() {
  font-family: 'Roboto', #{$generic-fonts};
  font-weight: 400;
}

/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes
/// @group Fonts
/// @example scss Input
///   .landing-section {
///     @include font-bold();
///   }
@mixin font-bold() {
  font-family: 'Roboto', #{$generic-fonts};
  font-weight: 700;
}

/// Improve animation performance for containers
/// @example scss Input
///   .card {
///     @include gpu();
///   }
@mixin gpu {
  backface-visibility: hidden;
  transform-style: preserve-3d;
  perspective: 1000px;

  .safari & {
    perspective: none; // otherwise text and icons become blurry
  }
}

/// Set exactly the same width and height of a component, avoid repeat the same dimension
/// @parameter {Measure unit} $width - Specify width of the box
/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width
/// @example scss Input
///   .card {
///     @include box(3.2rem);
///   }
///   .card-another {
///     @include box(3.2rem, 2rem);
///   }
@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}

/// Convert the pixels to rem for in a specific resolution, usually 1440px wide
/// @example scss Input
///   section {
///     height: pxToRem(200);
///   }
@function px-to-rem($px) {
  @return $px * 0.1rem;
}

/// Set top and left to 0
/// @example scss Input
///   element {
///     @include position-0;
///   }
@mixin position-0 {
  top: 0;
  left: 0;
}

/// Set full size of box and position
/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default
/// @example scss Input
///   element {
///     @include position-100(absolute);
///   }
@mixin position-100($pos: 'relative') {
  position: $pos;
  @include position-0;
  @include box(100%);
}

/// Set display flex and center children horizontally and vertically
/// @example scss Input
///   element {
///     @include flex-center;
///   }
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

/// Set display flex and center children vertically
/// @example scss Input
///   element {
///     @include flex-center-vert;
///   }
@mixin flex-center-vert {
  display: flex;
  align-items: center;
}

/// Set display flex and center children horizontally
/// @example scss Input
///   element {
///     @include flex-center-horiz;
///   }
@mixin flex-center-horiz {
  display: flex;
  justify-content: center;
}

/// Center its element (horizontally and vertically) by using transform
/// @example scss Input
///   element {
///     @include transform-center;
///   }
@mixin transform-center {
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
}

/// Set vertical center of its element
/// @example scss Input
///   element {
///     @include transform-center-vert;
///   }
@mixin transform-center-vert {
  top: 50%;
  transform: translateY(-50%);
}

/// Set horizontal center of its element
/// @example scss Input
///   element {
///     @include transform-center-horiz;
///   }
@mixin transform-center-horiz {
  left: 50%;
  transform: translateX(-50%);
}

/// Set z-index value in order of $element variable
/// @example scss Input
///   element {
///     @include z-index(preloader);
///   }
@mixin z-index($id) {
  z-index: index($elements, $id);
}

/// Reset button's look
/// @example scss Input
///   button {
///     @include reset-button;
///   }
@mixin reset-button {
  border: none;
  outline: none;
  cursor: pointer;
  background: transparent;
  padding: 0;
  text-align: inherit;
  letter-spacing: inherit;
  font-size: inherit;
  text-transform: inherit;
  color: inherit;
}

/// Set breakpoint via media queries
/// @example scss Input
///   element {
///     [..."small breakpoint" styles....]
///     @include breakpoint(medium) {
///        [..."medium breakpoint" styles....]
///     }
///   }
@mixin breakpoint($size) {
  @media (min-width: map-get($layout, $size) + px) {
    @content;
  }
}

/// Set element size based on columns for phone
/// Layout takes into account gutters as well (number of columns - 1) which can be controlled by passing extra gutters
/// @example scss Input
///   div {
///     width: small-columns(4);
///   }
@function small-columns($numCols: 1, $extraGutters: 0) {
  @return calc-columns(
    $grid-small-column,
    $grid-small-column-units,
    $grid-small-gutter,
    $grid-small-gutter-units,
    $numCols,
    $extraGutters
  );
}

/// Set element size based on columns for tablet
/// Layout takes into account gutters as well (number of columns - 1) which can be controlled by passing extra gutters
/// @example scss Input
///   div {
///    width: medium-columns(8);
///   }
@function medium-columns($numCols: 1, $extraGutters: 0) {
  @return calc-columns(
    $grid-medium-column,
    $grid-medium-column-units,
    $grid-medium-gutter,
    $grid-medium-gutter-units,
    $numCols,
    $extraGutters
  );
}

/// Set desktop columns
/// Layout takes into account gutters as well (number of columns - 1) which can be controlled by passing extra gutters
/// @example scss Input
///   element {
///     width: large-columns(10, 1);
///   }
@function large-columns($numCols: 1, $extraGutters: 0) {
  @return calc-columns(
    $grid-large-column,
    $grid-large-column-units,
    $grid-large-gutter,
    $grid-large-gutter-units,
    $numCols,
    $extraGutters
  );
}

/// Set desktop columns
/// Layout takes into account gutters as well (number of columns - 1) which can be controlled by passing extra gutters
/// @example scss Input
///   element {
///     width: xlarge-columns(12, 1);
///   }
@function xlarge-columns($numCols: 1, $extraGutters: 0) {
  @return calc-columns(
    $grid-xlarge-column,
    $grid-xlarge-column-units,
    $grid-xlarge-gutter,
    $grid-xlarge-gutter-units,
    $numCols,
    $extraGutters
  );
}

/// Calculate columns (internal use only)
@function calc-columns($column, $column-units, $gutter, $gutter-units, $numCols, $extraGutters) {
  $columns: $column * $numCols;
  $gutters: $gutter * (($numCols - 1) + $extraGutters);
  @if ($gutters != 0) {
    @return calc(#{$columns}#{$column-units} + #{$gutters}#{$gutter-units});
  } @else {
    @return #{$columns}#{$column-units};
  }
}
